<?php
/**
 * Menu registration.
 * 
 * See Menus section of template-hooks.php and template-functions.php for
 * information on where menus are hooked and how they are displayed.
 * 
 * @package Hermi
 * @subpackage Menus
 */

/**
 * Register the navigation menus used by the theme.
 */
add_action( 'after_setup_theme', 'hermi_register_nav_menus' );
function hermi_register_nav_menus() {
	register_nav_menus( [
		// Mobile nav (Same for both Foundation and WP dropdown navs)
		'mobile-nav'      => __( 'Mobile Menu', 'hermi' ),

		/*
	   * Note: It is suggested to use either the Foundation nav
		 * or the WP Dropdown navs.
		 */
		
		// Foundation dropdown nav for large screens
		'main-nav'      => __( 'Main Menu', 'hermi' ),
		
		// WP Dropdown nav for large screens.
		'secondary-left'  => __( 'Secondary Menu - Left', 'hermi' ),
		'secondary-right' => __( 'Secondary Menu - Right', 'hermi' ),
		'primary-left'    => __( 'Primary Menu - Left', 'hermi' ),
		'primary-center'  => __( 'Primary Menu - Center', 'hermi' ), // unused example
		'primary-right'   => __( 'Primary Menu - Right', 'hermi' ),
		
		
		// Footer nav
		'footer'        => __( 'Footer Menu', 'hermi' ),
	] );
}

/**
 * Remove id attribute from items.
 * 
 * Remove id attribute from menu items generated by  wp_nav_menu()() to avoid duplication
 * when the same menu is output multiple times. This will not affect a menu's container. The
 * ids of the containers can be modified by customizing the items_wrap argument for wp_nav_menu().
 * 
 * See inline docs on nav_menu_item_id for argument details.
 *
 * @since Hermi 0.1.0
 *
 * @param string   $menu_id The ID that is applied to the menu item's `<li>` element.
 * @param WP_Post  $item    The current menu item.
 * @param stdClass $args    An object of wp_nav_menu() arguments.
 * @param int      $depth   Depth of menu item. Used for padding.
 *
 * @return string
 */	
add_filter( 'nav_menu_item_id', 'hermi_remove_nav_menu_item_id', 10, 4 );
function hermi_remove_nav_menu_item_id( $id, $item, $args, $depth ) {
	return false;
}

/**
 * Add .active class to current menu item parents and current menu items for
 * Foundation Dropdown Menu compatibility.
 *
 * @param array    $classes The CSS classes that are applied to the menu item's `<li>` element.
 * @param WP_Post  $item    The current menu item.
 * @param stdClass $args    An object of wp_nav_menu() arguments.
 * @param int      $depth   Depth of menu item. Used for padding.
 * 
 * @return array
 */
add_filter( 'nav_menu_css_class', 'hermi_foundation_dropdown_nav_menu_css_class', 10, 4 ); 
function hermi_foundation_dropdown_nav_menu_css_class( $classes, $item, $args, $depth ) {
	if ( $item->current == 1 || $item->current_item_ancestor == true ) {
		$classes[] = 'active';
	}
	return $classes;
}

/**
 * Custom walker for Foundation Topbar compatibility. 
 */
class Topbar_Menu_Walker extends Walker_Nav_Menu {
	/**
	 * Starts the list before the elements are added.
	 *
	 * @since 3.0.0
	 *
	 * @see Walker::start_lvl()
	 *
	 * @param string   $output Passed by reference. Used to append additional content.
	 * @param int      $depth  Depth of menu item. Used for padding.
	 * @param stdClass $args   An object of wp_nav_menu() arguments.
	 */
	public function start_lvl( &$output, $depth = 0, $args = array() ) {
		if ( isset( $args->item_spacing ) && 'discard' === $args->item_spacing ) {
			$t = '';
			$n = '';
		} else {
			$t = "\t";
			$n = "\n";
		}
		$indent = str_repeat( $t, $depth );
		$output .= "{$n}{$indent}<ul class=\"menu\">{$n}";
	}
}

/**
 * Custom walker for Foundation Off Canvas Menu compatibility. 
 */
class Off_Canvas_Menu_Walker extends Walker_Nav_Menu {
	/**
	 * Starts the list before the elements are added.
	 *
	 * @since 3.0.0
	 *
	 * @see Walker::start_lvl()
	 *
	 * @param string   $output Passed by reference. Used to append additional content.
	 * @param int      $depth  Depth of menu item. Used for padding.
	 * @param stdClass $args   An object of wp_nav_menu() arguments.
	 */
	public function start_lvl( &$output, $depth = 0, $args = array() ) {
		if ( isset( $args->item_spacing ) && 'discard' === $args->item_spacing ) {
			$t = '';
			$n = '';
		} else {
			$t = "\t";
			$n = "\n";
		}
		$indent = str_repeat( $t, $depth );
		$output .= "{$n}{$indent}<ul class=\"vertical nested menu\">{$n}";
	}
}